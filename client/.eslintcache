[{"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\index.tsx":"1","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\reportWebVitals.js":"2","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\App.tsx":"3","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\redux-store.ts":"4","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\auth\\auth-reducer.ts":"5","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\auth\\auth-selectors.ts":"6","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\todo\\todo-selectors.ts":"7","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\todo\\todo-reducer.ts":"8","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\todo-tasks\\todoTask-selectors.ts":"9","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\todo-tasks\\todoTask-reducer.ts":"10","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Common\\Hooks\\message.ts":"11","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Common\\Header\\Header.tsx":"12","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Common\\Starter_page\\StarterPage.tsx":"13","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Auth\\LogIn\\LogIn.tsx":"14","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Auth\\SignUp\\SignUp.tsx":"15","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\api\\api.ts":"16","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Common\\Header\\Sidebar.tsx":"17","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\ToDo\\Lists.tsx":"18","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Common\\Preloader\\Preloader.tsx":"19","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\ToDo\\List.tsx":"20","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\ToDo\\Task\\Tasks.tsx":"21","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\ToDo\\Task\\Task.tsx":"22","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\ToDo\\Task\\Description.tsx":"23"},{"size":678,"mtime":1612551318000,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1612551318000,"results":"26","hashOfConfig":"25"},{"size":2758,"mtime":1612551318000,"results":"27","hashOfConfig":"25"},{"size":1148,"mtime":1612551318000,"results":"28","hashOfConfig":"25"},{"size":2438,"mtime":1612551318000,"results":"29","hashOfConfig":"25"},{"size":537,"mtime":1612551318000,"results":"30","hashOfConfig":"25"},{"size":589,"mtime":1612551318000,"results":"31","hashOfConfig":"25"},{"size":6036,"mtime":1612551318000,"results":"32","hashOfConfig":"25"},{"size":639,"mtime":1612551318000,"results":"33","hashOfConfig":"25"},{"size":6332,"mtime":1612551318000,"results":"34","hashOfConfig":"25"},{"size":290,"mtime":1612551318000,"results":"35","hashOfConfig":"25"},{"size":1738,"mtime":1612551318000,"results":"36","hashOfConfig":"25"},{"size":135,"mtime":1612551318000,"results":"37","hashOfConfig":"25"},{"size":1300,"mtime":1612551318000,"results":"38","hashOfConfig":"25"},{"size":2045,"mtime":1612551318000,"results":"39","hashOfConfig":"25"},{"size":4132,"mtime":1612551318000,"results":"40","hashOfConfig":"25"},{"size":2315,"mtime":1612551318000,"results":"41","hashOfConfig":"25"},{"size":1541,"mtime":1612551318000,"results":"42","hashOfConfig":"25"},{"size":459,"mtime":1612551318000,"results":"43","hashOfConfig":"25"},{"size":3173,"mtime":1612551318000,"results":"44","hashOfConfig":"25"},{"size":867,"mtime":1612551318000,"results":"45","hashOfConfig":"25"},{"size":4799,"mtime":1612551318000,"results":"46","hashOfConfig":"25"},{"size":1472,"mtime":1612551318000,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"131ep1s",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"50"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"50"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\index.tsx",[],["108","109"],"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\reportWebVitals.js",[],["110","111"],"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\App.tsx",["112","113","114"],"import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { UserType } from './api/api';\nimport './App.scss';\nimport { LogInPage } from './components/Auth/LogIn/LogIn';\nimport { SignUpPage } from './components/Auth/SignUp/SignUp';\nimport { HeaderH } from './components/Common/Header/Header';\nimport { useMessage } from './components/Common/Hooks/message';\nimport { StarterPage } from './components/Common/Starter_page/StarterPage';\nimport { actionsAuth } from './redux/auth/auth-reducer';\nimport { getAuthMessage, getIsAuthorized, getUserInfo } from './redux/auth/auth-selectors';\nimport { getTodoMessage } from './redux/todo/todo-selectors';\nimport { getTodoTaskMessage } from './redux/todo-tasks/todoTask-selectors';\nimport 'antd/dist/antd.css';\nimport { actionsTodoTask } from './redux/todo-tasks/todoTask-reducer';\nimport { actionsTodo } from './redux/todo/todo-reducer';\n\nconst App = () => {\n  const isAuthorized = useSelector(getIsAuthorized)\n  const user = useSelector(getUserInfo)\n  const dispatch = useDispatch()\n  const errorWrap = useMessage()\n  const todoTaskError = useSelector(getTodoTaskMessage)\n  const todoError = useSelector(getTodoMessage)\n  const authError = useSelector(getAuthMessage)\n  useEffect(() => {\n    if ((todoTaskError || todoError || authError) === 'Your session time is run out'){\n        dispatch(actionsAuth.setIsAuthorized(false))\n        dispatch(actionsAuth.setUser(null))\n    }\n    errorWrap(todoTaskError || todoError || authError)\n    dispatch(actionsAuth.setErrors(null))\n    dispatch(actionsTodoTask.setErrors(null))\n    dispatch(actionsTodo.setErrors(null))\n  }, [todoTaskError, todoError, authError])\n\n  useEffect(() => {\n    let user: UserType\n    let isExist = localStorage.getItem('items')\n    if (isExist !== null) {\n      user = JSON.parse(isExist)\n      if (user) {\n        dispatch(actionsAuth.setUser(user))\n        dispatch(actionsAuth.setIsAuthorized(true))\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    \n    if (isAuthorized === true) {\n      localStorage.setItem('items', JSON.stringify(user))\n    } else {\n      localStorage.removeItem('items');\n    }\n  }, [isAuthorized])\n\n  return (\n    <div className=\"container\">\n      <HeaderH />\n      {isAuthorized\n        ? (<Switch>\n            <Route path='/start' exact render={() => <StarterPage />}></Route>\n            <Redirect to='/start' />\n        </Switch>)\n        : (<Switch>\n            <Route path='/login' exact render={() => <LogInPage />}></Route>\n            <Route path='/regist' exact render={() => <SignUpPage />}></Route>\n            <Redirect to='/login' />\n        </Switch>)\n      }\n    </div>\n  )\n\n}\n\nexport default App;\n\n\n","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\redux-store.ts",[],"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\auth\\auth-reducer.ts",[],"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\auth\\auth-selectors.ts",[],"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\todo\\todo-selectors.ts",[],"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\todo\\todo-reducer.ts",["115"],"import { todoAPI } from './../../api/api';\nimport { ListType, TaskType } from '../../api/api';\nimport { AppStateType, BasicThunkType, InferActionsType } from '../redux-store';\n\nconst SET_LISTS = 'TDL/TODO-REDUCER/SET-LISTS';\nconst CREATE_LIST = 'TDL/TODO-REDUCER/CREATE-LIST';\nconst DELETE_LIST = 'TDL/TODO-REDUCER/DELETE-LIST';\nconst RENAME_LIST = 'TDL/TODO-REDUCER/RENAME-LIST';\nconst CHANGE_ORD = 'TDL/TODO-REDUCER/CHANGE-ORD';\nconst IS_FETCH = 'TDL/TODO-REDUCER/IS-FETCH';\nconst SETERROR = 'TDL/TODO-REDUCER/SET-ERROR'\n\nconst initialState = {\n    lists: [] as Array<ListType>,\n    isFetching: false,\n    message: null as null | string\n}\n\nconst toDoReducer = (state = initialState, action: actionsTodoType): InitialStateType => {\n\n    switch (action.type) {\n        case SET_LISTS: {\n            return {\n                ...state,\n                lists: action.lists\n            }\n        }\n        case CREATE_LIST: {\n            return {\n                ...state,\n                lists: [action.list, ...state.lists]\n            }\n        }\n        case DELETE_LIST: {\n            return {\n                ...state,\n                lists: state.lists.filter(list => list._id !== action.todolistId)\n            }\n        }\n        case RENAME_LIST: {\n            return {\n                ...state,\n                lists: state.lists.map(list => { if (list._id === action.todolistId) { return { ...list, title: action.title } } else return list })\n            }\n        }\n        case IS_FETCH: {\n            return {\n                ...state,\n                isFetching: action.bool\n            }\n        }\n        case SETERROR: {\n            return {\n                ...state,\n                message: action.message\n            }\n        }\n        case CHANGE_ORD: {\n            let a, indexs = 0;\n            let array = state.lists;\n\n            array.forEach((elem, index) => {\n                if (elem._id === action.todolistId) {\n                    indexs = index;\n                }\n            })\n\n            a = array[indexs];\n            array[indexs] = array[indexs + 1];\n            array[indexs + 1] = a;\n            return {\n                ...state,\n                lists: array.map(item => { return item })\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\nexport const actionsTodo = {\n    setLists: (lists: Array<ListType>) => ({ type: SET_LISTS, lists } as const),\n    createList: (list: any) => ({ type: CREATE_LIST, list } as const),\n    deleteList: (todolistId: string) => ({ type: DELETE_LIST, todolistId } as const),\n    renameTitle: (todolistId: string, title: string) => ({ type: RENAME_LIST, todolistId, title } as const),\n    isFetching: (bool: boolean) => ({ type: IS_FETCH, bool } as const),\n    setErrors: (message: null | string) => ({ type: SETERROR, message } as const),\n    changeOrder: (todolistId: string, putAfterItemId: string) => ({ type: CHANGE_ORD, todolistId, putAfterItemId } as const)\n}\n\nexport const getLists = (): ThunkType => async (dispatch, getState: () => AppStateType) => {\n\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.getToDoLists(getState().authR.user.token);\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setLists(response))\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n\n\n}\n\nexport const postList = (title: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.postToDoLists(title, getState().authR.user.token)\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.createList(response))\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n}\n\nexport const deleteListThunk = (todolistId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.deleteToDoList(todolistId, getState().authR.user.token)\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.deleteList(todolistId))\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n\n}\n\n\nexport const renameTitleThunk = (todolistId: string, title: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.renameToDoList(todolistId, title, getState().authR.user.token)\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.renameTitle(todolistId, title))\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n}\n\nexport const changeOrderThunk = (todolistId: string, putAfterItemId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.reorderToDoList(todolistId, putAfterItemId, getState().authR.user.token)\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.changeOrder(todolistId, putAfterItemId));\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n\n}\n\nexport default toDoReducer;\n\nexport type InitialStateType = typeof initialState\ntype actionsTodoType = InferActionsType<typeof actionsTodo>\ntype ThunkType = BasicThunkType<actionsTodoType>\n","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\todo-tasks\\todoTask-selectors.ts",[],"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\redux\\todo-tasks\\todoTask-reducer.ts",["116"],"// import { tasksAPI, toDoAPI } from \"../api/api\";\n\nimport { isTryStatement } from \"typescript\"\nimport { tasksAPI, TaskType, UpdatedTaskType } from \"../../api/api\"\nimport { AppStateType, BasicThunkType, InferActionsType } from \"../redux-store\"\n\nconst GET_TASKS = 'GET-TASKS'\nconst POST_TASK = 'POST-TASK'\nconst DEL_TASK = 'DEL_TASK'\nconst UPDATE_TASK = 'UPDATE-TASK'\nconst REORDER_TASK = 'REORDER-TASK'\nconst IS_FETCH = 'IS-FETCH';\nconst SETERROR = 'TDL/TODO-REDUCER/SET-ERROR'\n\nconst initialState = {\n    tasks: [] as Array<TaskType>,\n    default: {\n        description: 'no desc',\n        completed: false,\n        status: 0,\n        priority: 1,\n        startDate: '2020',\n        deadline: 'today'\n    },\n    isFetching: false,\n    message: null as null | string\n}\n\nexport const toDoTasksReducer = (state = initialState, action: any) => {\n\n    switch (action.type) {\n        case GET_TASKS: {\n            return {\n                ...state,\n                tasks: action.tasks\n            }\n        }\n        case POST_TASK: {\n            return {\n                ...state,\n                tasks: [action.taskItem, ...state.tasks]\n            }\n        }\n        case IS_FETCH: {\n            return {\n                ...state,\n                isFetching: action.bool\n            }\n        }\n        case DEL_TASK: {\n            return {\n                ...state,\n                tasks: state.tasks.filter(elem => elem._id !== action.taskId)\n            }\n        }\n        case UPDATE_TASK: {\n            return {\n                ...state,\n                tasks: state.tasks.map(task => {\n                    if (task._id === action.taskId) {\n                        return action.item;\n                    }\n                    else return task;\n                })\n            }\n        }\n        case REORDER_TASK: {\n            let a, indexs = 0;\n            let array = state.tasks;\n\n            array.forEach((elem, index) => {\n                if (elem._id === action.taskId) {\n                    indexs = index;\n                }\n            })\n\n            a = array[indexs];\n            array[indexs] = array[indexs + 1];\n            array[indexs + 1] = a;\n            return {\n                ...state,\n                tasks: array.map(item => { return item })\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\n\nexport const actionsTodoTask = {\n    getTasks: (tasks: Array<TaskType>) => ({ type: GET_TASKS, tasks } as const),\n    postTasks: (taskItem: TaskType) => ({ type: POST_TASK, taskItem } as const),\n    deleteTask: (taskId: string) => ({ type: DEL_TASK, taskId } as const),\n    updateTask: (taskId: string, item: any) => ({ type: UPDATE_TASK, taskId, item } as const),\n    reorderTask: (taskId: string) => ({ type: REORDER_TASK, taskId } as const),\n    isFetching: (bool: boolean) => ({ type: IS_FETCH, bool } as const),\n    setErrors: (message: null | string) => ({ type: SETERROR, message } as const)\n\n}\n\n\nexport const getTasksThunk = (todolistId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actionsTodoTask.isFetching(true))\n        let response = await tasksAPI.getTasks(todolistId, getState().authR.user.token)\n        dispatch(actionsTodoTask.isFetching(false))\n        dispatch(actionsTodoTask.getTasks(response))\n        dispatch(actionsTodoTask.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodoTask.isFetching(false))\n        dispatch(actionsTodoTask.setErrors(e.response.data.message))\n    }\n}\n\nexport const postTasksThunk = (todolistId: string, newTaskTitle: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actionsTodoTask.isFetching(true))\n        let response = await tasksAPI.postTasks(todolistId, newTaskTitle, getState().authR.user.token);\n        dispatch(actionsTodoTask.isFetching(false))\n        dispatch(actionsTodoTask.postTasks(response));\n        dispatch(actionsTodoTask.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodoTask.isFetching(false))\n        dispatch(actionsTodoTask.setErrors(e.response.data.message))\n    }\n}\n\nexport const deleteTaskThunk = (todolistId: string, taskId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actionsTodoTask.isFetching(true))\n        let response = await tasksAPI.deleteTasks(todolistId, taskId, getState().authR.user.token);\n        dispatch(actionsTodoTask.isFetching(false))\n        dispatch(actionsTodoTask.deleteTask(taskId));\n        dispatch(actionsTodoTask.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodoTask.isFetching(false))\n        dispatch(actionsTodoTask.setErrors(e.response.data.message))\n    }\n}\n\nexport const updateTaskThunk = (\n    todolistId: string,\n    taskId: string,\n    updatedTaskObject: UpdatedTaskType): ThunkType => async (dispatch, getState: () => AppStateType) => {\n        try {\n            dispatch(actionsTodoTask.isFetching(true))\n            let response = await tasksAPI.updateTasks(todolistId, taskId, updatedTaskObject, getState().authR.user.token);\n            dispatch(actionsTodoTask.isFetching(false))\n            dispatch(actionsTodoTask.updateTask(taskId, response.updatedTask))\n            dispatch(actionsTodoTask.setErrors(response.message))\n        } catch (e) {\n            dispatch(actionsTodoTask.isFetching(false))\n            dispatch(actionsTodoTask.setErrors(e.response.data.message))\n        }\n    }\n\nexport const reorderTaskThunk = (todolistId: string, taskId: string, putAfterItemId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    \n    try{\n        dispatch(actionsTodoTask.isFetching(true))\n        let response = await tasksAPI.reorderTasks(todolistId, taskId, putAfterItemId, getState().authR.user.token)\n        dispatch(actionsTodoTask.isFetching(false))\n        dispatch(actionsTodoTask.setErrors(response.message))\n    }catch(e){\n        dispatch(actionsTodoTask.isFetching(false))\n        dispatch(actionsTodoTask.setErrors(e.response.data.message))\n    }\n    \n    dispatch(actionsTodoTask.reorderTask(taskId));\n}\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsType<typeof actionsTodoTask>\ntype ThunkType = BasicThunkType<ActionsType>","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Common\\Hooks\\message.ts",[],"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Common\\Header\\Header.tsx",["117","118","119","120"],"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { actionsAuth } from '../../../redux/auth/auth-reducer';\nimport { getIsAuthorized } from '../../../redux/auth/auth-selectors';\nimport { Sidebar } from './Sidebar';\nimport styles from './Header.module.scss';\nimport { Layout, Menu, Breadcrumb } from 'antd';\n\nconst { Header, Content, Footer } = Layout;\n\n\nexport const HeaderH = () => {\n    const isAuthorized = useSelector(getIsAuthorized)\n    const dispatch = useDispatch()\n\n    return (\n      //   <nav>\n      //   <div className={styles.nav_wrapper}>\n      //     <a href=\"#\" className=\"brand-logo\">MKdir</a>\n          \n      //     <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n      //       {isAuthorized \n      //       ? <li>< Sidebar /></li>\n      //       : <> <li><NavLink to='/login'>Log in</NavLink></li>\n      //         <li><NavLink to='/regist' >Sign up</NavLink></li></>\n      //       }\n      //     </ul>\n      //   </div>\n        \n      // </nav>\n      \n<Layout>\n    <Header>\n       \n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']} >\n        <span className={styles.logo}>\n         <NavLink to='/' className={styles.logo_link}> MKdir </NavLink>\n        </span>\n        {isAuthorized \n            ? <Menu.Item style={{float: \"right\"}} key=\"1\">< Sidebar /></Menu.Item>\n            : <><Menu.Item style={{float: \"right\"}} key=\"2\"><NavLink to='/login'>Log in</NavLink></Menu.Item>\n              <Menu.Item style={{float: \"right\"}} key=\"3\"><NavLink to='/regist' >Sign up</NavLink></Menu.Item></>\n            }\n      </Menu>\n      <Content >\n      \n    </Content>\n    </Header>\n    \n  </Layout>)\n\n \n \n  \n}","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Common\\Starter_page\\StarterPage.tsx",[],"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Auth\\LogIn\\LogIn.tsx",["121"],"import { Formik } from \"formik\";\nimport { Form, Input } from 'formik-antd'\nimport React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { logInThunk } from \"../../../redux/auth/auth-reducer\";\nimport { Preloader } from \"../../Common/Preloader/Preloader\";\nimport styles from '../LogIn.module.scss';\n\nexport const LogInPage = () => {\n  const dispatch = useDispatch()\n  \n\n  const submitHandler = (values: LogInValuesType, actions: any) => {\n    values && dispatch(logInThunk(values))\n  }\n\n  return (<div>\n    <div className={styles.title}>Log In here</div>\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      onSubmit={submitHandler}\n    >\n      {props => (\n        <Form>\n          <Input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            placeholder='Email'\n            name=\"email\"\n          />\n          <Input\n            type=\"password\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            placeholder='Password'\n            name=\"password\"\n          />\n\n          <button type=\"submit\"><span>Submit</span></button>\n        </Form>\n      )}\n    </Formik>\n  </div>)\n}\n\nexport type LogInValuesType = {\n  email: string,\n  password: string,\n}","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Auth\\SignUp\\SignUp.tsx",["122"],"import { Formik } from \"formik\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router-dom\"\nimport { signUpThunk } from \"../../../redux/auth/auth-reducer\"\nimport { getAuthMessage } from \"../../../redux/auth/auth-selectors\"\nimport { Form, Input } from 'formik-antd'\nimport styles from '../LogIn.module.scss'\n\ntype PropsType = {\n\n}\n\nexport const SignUpPage: React.FC<PropsType> = () => {\n\n  const dispatch = useDispatch()\n  const history = useHistory()\n  const errors = useSelector(getAuthMessage)\n\n  const submitHandler = async (values: SignUpValuesType, actions: any) => {\n    let response: any\n    if (values) {\n      response = await dispatch(signUpThunk(values))\n      !errors && history.push('/login')\n    }\n  }\n\n  return (<div>\n    <div className={styles.title}>Create new user</div>\n    <Formik\n      initialValues={{\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: ''\n      }}\n      onSubmit={submitHandler}\n    >\n      {props => (\n        <Form>\n          <Input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            placeholder='First name'\n            name=\"firstName\"\n          />\n          <Input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            placeholder='Last name'\n            name=\"lastName\"\n          />\n          <Input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            placeholder='Email'\n            name=\"email\"\n          />\n          <Input\n            type=\"password\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            placeholder='Password'\n            name=\"password\"\n          />\n\n          <button type=\"submit\"><span>Submit</span></button>\n        </Form>\n      )}\n    </Formik>\n  </div>)\n}\n\nexport type SignUpValuesType = {\n  firstName: string,\n  lastName: string,\n  email: string,\n  password: string,\n}","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\api\\api.ts",["123"],"import { LogInValuesType } from './../components/Auth/LogIn/LogIn';\n\nimport axios from 'axios'\nimport { SignUpValuesType } from '../components/Auth/SignUp/SignUp';\n\nconst instance = axios.create({\n    headers: {\n        ['Content-Type']: 'application/json'\n    }\n});\n\n\n\nexport const authAPI = {\n    logIn(user: LogInValuesType) {\n        return instance.post(`/api/auth/login`, user)\n            .then(response => response.data)\n    },\n    signUp(user: SignUpValuesType) {\n        return instance.post(`/api/auth/register`, user)\n            .then(response => response.data)\n    }\n}\nexport const todoAPI = {\n    getToDoLists(token: string) {\n        return instance.get(`/api/todo/lists`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    postToDoLists(title: string, token: string) {\n        return instance.post(`/api/todo/lists`, { title }, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    renameToDoList(todolistId: string, title: string, token: string) {\n        return instance.put(`/api/todo/lists/${todolistId}`, { title }, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    deleteToDoList(todolistId: string, token: string) {\n        return instance.delete(`/api/todo/lists/${todolistId}`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    reorderToDoList(todolistId: string, putAfterItemId: string, token: string) {\n\n        return instance.put(`/api/todo/lists/${todolistId}/reorder`, { putAfterItemId }, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data);\n    }\n}\n\nexport const tasksAPI = {\n    getTasks(todolistId: string, token: string){\n        return instance.get(`/api/tasks/${todolistId}/tasks`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    postTasks(todolistId: string, title: string, token: string){\n        return instance.post(`/api/tasks/${todolistId}/tasks`, {title}, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    deleteTasks(todolistId: string, taskId: string, token: string){\n        return instance.delete(`/api/tasks/${todolistId}/tasks/${taskId}`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data);\n    },\n    updateTasks(todolistId: string, taskId: string, updateTask: UpdatedTaskType, token: string){\n        return instance.put(`/api/tasks/${todolistId}/tasks/${taskId}`, updateTask, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data);\n    },\n    reorderTasks(todolistId: string, taskId: string, putAfterItemId: string, token: string){\n        return instance.put(`/api/tasks/${todolistId}/tasks/${taskId}/reorder`, {putAfterItemId}, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data);\n    }\n}\n\nexport type UpdatedTaskType = {\n    title: string,\n    completed: boolean,\n    deadline: Date,\n    description: string\n}\n\nexport type TaskType = {\n    _id: string,\n    description: String,\n    title:  string,\n    // priority: Number,\n    completed: boolean,\n    startDate: Date,\n    deadline: string,\n    order: number,\n    listId: string,\n}\n\nexport type UserType = {\n    firstName: null | string,\n    lastName: null | string,\n    token: null | string\n}\n\nexport type ListType = {\n    _id: string,\n    title: string,\n    addedDate: Date,\n    order: number,\n    tasks: Array<any>  ////????any\n}\n","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Common\\Header\\Sidebar.tsx",[],"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\ToDo\\Lists.tsx",["124","125"],"import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getLists, postList } from '../../redux/todo/todo-reducer';\nimport { getIsFetching } from '../../redux/todo/todo-selectors';\nimport { Preloader } from '../Common/Preloader/Preloader';\nimport List from './List';\nimport style from './Lists.module.scss';\nimport { Formik } from \"formik\";\nimport { Form, Input } from 'formik-antd'\n\n\nconst Lists = React.memo( () => {\n\n    const isFetching = useSelector(getIsFetching)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n\n        dispatch(getLists());\n    }, []);\n\n    const submitHandler = (values: any, actions: any) => {\n        dispatch(postList(values.title))\n        actions.resetForm('')\n    }\n    return (<div>\n\n        <div className={style.newTitle}>\n            <span className={style.textTitle}>\n                Enter new title\n            </span>\n            <Formik\n                initialValues={{\n                    title: ''\n                }}\n                onSubmit={submitHandler}\n            >\n                {props => (\n                    <Form>\n                        <Input name='title' type='text' onChange={props.handleChange} />\n                        <button type=\"submit\"><span>Create</span></button>\n                    </Form>\n                )}\n            </Formik>\n        </div>\n\n        {isFetching && <Preloader />}\n        <div className={style.content}>\n            <List />\n        </div>\n\n    </div>)\n});\n\nexport default Lists;","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\Common\\Preloader\\Preloader.tsx",["126"],"import styles from './Preloader.module.scss';\n\nexport const Preloader = () => {\n    return (\n        <div className=\"cube-loader\">\n        <div className=\"caption\">\n          <div className=\"cube-loader\">\n            <div className=\"cube loader-1\"></div>\n            <div className=\"cube loader-2\"></div>\n            <div className=\"cube loader-4\"></div>\n            <div className=\"cube loader-3\"></div>\n          </div>\n        </div>\n      </div>\n    );\n} ","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\ToDo\\List.tsx",["127","128"],"import style from './Lists.module.scss';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getLists } from '../../redux/todo/todo-selectors';\nimport { ListType, UserType } from '../../api/api';\nimport { changeOrderThunk, deleteListThunk, renameTitleThunk } from '../../redux/todo/todo-reducer';\nimport Tasks from './Task/Tasks';\n// import {DeleteOutlined} from '@ant-design/icons';\nimport arrowUp from './../../assest/ArrowUp.svg';\nimport arrowDown from './../../assest/ArrowDown.svg';\nimport deleteTask from './../../assest/delB.svg';\n\n\nconst List: React.FC<any> = (props) => {\n\n    let [editMode, changeEditMode] = useState(false);\n    let [choosedTitle, changeTitle] = useState('');\n    let [newTitleText, changeNewTitleText] = useState('');\n    const dispatch = useDispatch()\n    const lists = useSelector(getLists)\n\n\n    let deleteList = (todolistId: string) => {\n        dispatch(deleteListThunk(todolistId));\n    }\n\n    let updateTitle = () => {\n        //thunk\n        dispatch(renameTitleThunk(choosedTitle, newTitleText));\n        changeEditMode(false);\n        changeNewTitleText('');\n    }\n\n    let activateEditMode = (text: string, id: string) => {\n        changeTitle(id);\n        changeNewTitleText(text);\n        changeEditMode(true);\n    }\n    let changeOrder = (todolistId: string, putAfterItemId: string) => {\n        dispatch(changeOrderThunk(todolistId, putAfterItemId));\n    }\n\n    let listsArray = lists && lists.map((list: ListType, index: number, array: Array<ListType>) => {\n        let date = new Date(list.addedDate)\n        return (<div key={list._id} className={style.listUI}>\n            <div className={style.title}>\n                <span className={style.edit_title}>\n                    {(editMode && list._id === choosedTitle)\n                        ? <input onBlur={updateTitle} autoFocus={true} onChange={(e) => changeNewTitleText(e.currentTarget.value)} value={newTitleText}></input>\n                        : <span className={style.listTitle} onDoubleClick={() => activateEditMode(list.title, list._id)}>{list.title}</span>\n                    }\n                </span>\n                <div onClick={() => deleteList(list._id)} className={style.del_title}>\n                   <img src={deleteTask} title='Delete list' alt=\"delete task img\"/>\n                </div>\n            </div>\n            \n            <div className={style.tasks}>\n                    <Tasks listId={list._id}/>\n            </div>\n            <div className={style.arrows} > \n                {index < array.length-1 && <div className={style.down} onClick={() => changeOrder(array[index]._id, array[index+1]._id) }  ><img  src={arrowDown} alt='arrow_down'/> </div> }\n                {index > 0 && <div onClick={() => changeOrder(array[index-1]._id, array[index]._id)}  className={style.up}><img src={arrowUp} alt='arrow_up'/></div> }\n             </div>\n             <div className={style.date}>{date.toDateString() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()}</div>\n        </div>);\n    });\n\n    return (<>\n        {listsArray}\n    </>);\n}\nexport default List;","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\ToDo\\Task\\Tasks.tsx",[],"E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\ToDo\\Task\\Task.tsx",["129"],"import React, { useState } from 'react';\nimport Description from './Description';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTasks } from '../../../redux/todo-tasks/todoTask-selectors';\nimport style from './Tasks.module.scss';\nimport { deleteTaskThunk, postTasksThunk, reorderTaskThunk, updateTaskThunk } from '../../../redux/todo-tasks/todoTask-reducer';\nimport { TaskType } from '../../../api/api';\nimport { Formik } from \"formik\";\nimport { Form, Input } from 'formik-antd'\nimport { DeleteOutlined } from '@ant-design/icons';\nimport arrowUp from './../../../assest/ArrowUp.svg';\nimport arrowDown from './../../../assest/ArrowDown.svg';\n\ntype PropsType = {\n    listId: string\n}\n\nconst Task: React.FC<PropsType> = React.memo(props => {\n\n    const dispatch = useDispatch()\n    const tasks = useSelector(getTasks)\n\n    let [editMode, changeEditMode] = useState(false);\n    let [TaskText, changeTaskText] = useState('');\n    let [choosedTask, changeChoosedTask] = useState('');\n\n\n    let deleteTask = (taskId: string) => {\n        dispatch(deleteTaskThunk(props.listId, taskId))\n    }\n\n    let setTaskText = (text: string) => {\n        changeTaskText(text);\n    }\n\n    let setStatusModeTrue = (text: string, taskId: string) => {\n        changeChoosedTask(taskId)\n        changeTaskText(text);\n        changeEditMode(!editMode);\n    }\n\n\n    let changeOrderTasks = (taskId: string, putAfterItemId: string) => {\n        dispatch(reorderTaskThunk(props.listId, taskId, putAfterItemId))\n    }\n\n\n    let setStatusModeFalse = (task: any) => {\n        changeEditMode(!editMode);\n        dispatch(updateTaskThunk(props.listId, task._id, { ...task, title: TaskText }))\n    }\n    let changeCheckBox = (bool: boolean, task: any) => {\n        let intBool = Number(bool);\n        dispatch(updateTaskThunk(props.listId, task._id, { ...task, completed: intBool }))\n    }\n\n    let taskArray = tasks && tasks.map((task: TaskType, index: number, array: Array<TaskType>) => {\n        if (task.listId === props.listId) {\n            let date = new Date(task.startDate)\n            return <div key={task._id} className={style.taskItem}>\n                    <input checked={task.completed} //CHECKBOX\n                        onChange={(e) => changeCheckBox(e.currentTarget.checked, task)}\n                        className={style.complete}\n                        type='checkbox'\n                    />\n                    <div className={style.title}>\n                        {(editMode && choosedTask === task._id)\n                            ? <input autoFocus={true} onBlur={() => setStatusModeFalse(task)} onChange={(e) => setTaskText(e.currentTarget.value)} type=\"text\" value={TaskText} />\n                            : <span onDoubleClick={() => setStatusModeTrue(task.title, task._id)}>{task.title}</span>\n                        }\n                    </div>\n                    \n                    <span onClick={() => deleteTask(task._id)} className={style.delete}>\n                        <DeleteOutlined />\n                    </span>\n\n\n                    <div>\n                        <Description\n                            task={task}\n                            taskId={task._id}\n                            listId={props.listId} />\n                    </div>\n                    <div className={style.date}>{date.toDateString() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()}</div>\n                    <div className={style.arrows} > \n                        {index < array.length-1 && <div className={style.down} onClick={() => changeOrderTasks(array[index]._id, array[index+1]._id) }  ><img  src={arrowDown} alt='arrow_down'/> </div> }\n                        {index > 0 && <div onClick={() => changeOrderTasks(array[index-1]._id, array[index]._id)}  className={style.up}><img src={arrowUp} alt='arrow_up'/></div> }\n                    </div>\n              \n            </div>\n        }\n    });\n\n    const submitHandler = (values: any, actions: any) => {\n        dispatch(postTasksThunk(props.listId, values.title))\n        actions.resetForm('')\n    }\n\n    return (\n        <div>\n            <div className={style.task_input}>\n            <Formik\n                initialValues={{\n                    title: ''\n                }}\n                onSubmit={submitHandler}\n            >\n                {props => (\n                    <Form>\n                        <Input name='title' type='text' onChange={props.handleChange} className='task_input'/>\n                        <button type=\"submit\"><span>Add</span></button>\n                    </Form>\n                )}\n            </Formik></div>\n            \n            <div className={style.content}>\n                {taskArray}\n            </div>\n\n\n        </div>\n    );\n});\nexport default Task;","E:\\WebP\\React+Node\\Todo_list2\\client\\src\\components\\ToDo\\Task\\Description.tsx",["130","131","132","133"],"import style from './Tasks.module.scss';\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { updateTaskThunk } from '../../../redux/todo-tasks/todoTask-reducer';\nimport { TaskType, UpdatedTaskType } from '../../../api/api';\n\ntype PropsType = {\n    listId: string,\n    task: any,\n    taskId: string\n}\nconst Description: React.FC<PropsType> = props => {\n\n    let [editMode, changeEditMode] = useState(false);\n    let [choosedTaskId, changeChoosedTaskId ] = useState('');\n    let [newDesc, changeNewDesc] = useState(props.task.description);\n    const dispatch = useDispatch()\n\n    let turnEditMode = () => {\n        changeEditMode(!editMode);\n        changeChoosedTaskId(props.taskId);\n    }\n\n    let onChangeDesc = (newText: string) => {\n        changeNewDesc(newText);\n    }\n    let updateDesc = (task: any) => {\n        changeEditMode(!editMode);\n        dispatch(updateTaskThunk(props.listId, task._id, {...task, description: newDesc}))\n        debugger\n    }\n    \n    return(\n        <div>\n            {(editMode && choosedTaskId === props.taskId)\n            ? <textarea onBlur={() => updateDesc(props.task)} onChange={(e) => onChangeDesc(e.currentTarget.value)} autoFocus={true} value={newDesc}></textarea>\n            :<span onDoubleClick={turnEditMode}>{props.task.description}</span>\n            }\n        </div>\n    )\n}\nconst DescriptionMemoization = React.memo(Description)\nexport default DescriptionMemoization",{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":36,"column":6,"nodeType":"140","endLine":36,"endColumn":43,"suggestions":"141"},{"ruleId":"138","severity":1,"message":"142","line":48,"column":6,"nodeType":"140","endLine":48,"endColumn":8,"suggestions":"143"},{"ruleId":"138","severity":1,"message":"144","line":57,"column":6,"nodeType":"140","endLine":57,"endColumn":20,"suggestions":"145"},{"ruleId":"146","severity":1,"message":"147","line":2,"column":20,"nodeType":"148","messageId":"149","endLine":2,"endColumn":28},{"ruleId":"146","severity":1,"message":"150","line":3,"column":10,"nodeType":"148","messageId":"149","endLine":3,"endColumn":24},{"ruleId":"146","severity":1,"message":"151","line":4,"column":10,"nodeType":"148","messageId":"149","endLine":4,"endColumn":21},{"ruleId":"146","severity":1,"message":"152","line":8,"column":24,"nodeType":"148","messageId":"149","endLine":8,"endColumn":34},{"ruleId":"146","severity":1,"message":"153","line":10,"column":26,"nodeType":"148","messageId":"149","endLine":10,"endColumn":32},{"ruleId":"146","severity":1,"message":"154","line":15,"column":11,"nodeType":"148","messageId":"149","endLine":15,"endColumn":19},{"ruleId":"146","severity":1,"message":"155","line":6,"column":10,"nodeType":"148","messageId":"149","endLine":6,"endColumn":19},{"ruleId":"146","severity":1,"message":"156","line":22,"column":7,"nodeType":"148","messageId":"149","endLine":22,"endColumn":15},{"ruleId":"157","severity":1,"message":"158","line":8,"column":9,"nodeType":"159","messageId":"160","endLine":8,"endColumn":45,"fix":"161"},{"ruleId":"146","severity":1,"message":"162","line":1,"column":28,"nodeType":"148","messageId":"149","endLine":1,"endColumn":36},{"ruleId":"138","severity":1,"message":"142","line":20,"column":8,"nodeType":"140","endLine":20,"endColumn":10,"suggestions":"163"},{"ruleId":"146","severity":1,"message":"164","line":1,"column":8,"nodeType":"148","messageId":"149","endLine":1,"endColumn":14},{"ruleId":"146","severity":1,"message":"165","line":2,"column":17,"nodeType":"148","messageId":"149","endLine":2,"endColumn":26},{"ruleId":"146","severity":1,"message":"166","line":5,"column":20,"nodeType":"148","messageId":"149","endLine":5,"endColumn":28},{"ruleId":"167","severity":1,"message":"168","line":57,"column":96,"nodeType":"169","messageId":"170","endLine":57,"endColumn":98},{"ruleId":"146","severity":1,"message":"171","line":1,"column":8,"nodeType":"148","messageId":"149","endLine":1,"endColumn":13},{"ruleId":"146","severity":1,"message":"165","line":2,"column":17,"nodeType":"148","messageId":"149","endLine":2,"endColumn":26},{"ruleId":"146","severity":1,"message":"147","line":5,"column":10,"nodeType":"148","messageId":"149","endLine":5,"endColumn":18},{"ruleId":"146","severity":1,"message":"172","line":5,"column":20,"nodeType":"148","messageId":"149","endLine":5,"endColumn":35},"no-native-reassign",["173"],"no-negated-in-lhs",["174"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'errorWrap'. Either include them or remove the dependency array.","ArrayExpression",["175"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["176"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["177"],"@typescript-eslint/no-unused-vars","'TaskType' is defined but never used.","Identifier","unusedVar","'isTryStatement' is defined but never used.","'actionsAuth' is defined but never used.","'Breadcrumb' is defined but never used.","'Footer' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'Preloader' is defined but never used.","'response' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property ['Content-Type'] found.","Property","unnecessarilyComputedProperty",{"range":"178","text":"179"},"'useState' is defined but never used.",["180"],"'styles' is defined but never used.","'useEffect' is defined but never used.","'UserType' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'style' is defined but never used.","'UpdatedTaskType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"181","fix":"182"},{"desc":"183","fix":"184"},{"desc":"185","fix":"186"},[220,236],"'Content-Type'",{"desc":"183","fix":"187"},"Update the dependencies array to be: [todoTaskError, todoError, authError, errorWrap, dispatch]",{"range":"188","text":"189"},"Update the dependencies array to be: [dispatch]",{"range":"190","text":"191"},"Update the dependencies array to be: [isAuthorized, user]",{"range":"192","text":"193"},{"range":"194","text":"191"},[1714,1751],"[todoTaskError, todoError, authError, errorWrap, dispatch]",[2039,2041],"[dispatch]",[2224,2238],"[isAuthorized, user]",[626,628]]